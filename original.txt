Software Engineering Challenge
Imagine for a moment that one of our product lines ships in various pack sizes:
‚Ä¢ 250 Items
‚Ä¢ 500 Items
‚Ä¢ 1000 Items
‚Ä¢ 2000 Items
‚Ä¢ 5000 Items
Our customers can order any number of these items through our website, but they will always only
be given complete packs.
1. Only whole packs can be sent. Packs cannot be broken open.
2. Within the constraints of Rule 1 above, send out the least amount of items to fulfil the order.
3. Within the constraints of Rules 1 & 2 above, send out as few packs as possible to fulfil each
order.
(Please note, rule #2 takes precedence over rule #3)
So, for example:
Items ordered Correct number of packs Incorrect number of packs
1 1 x 250 1 x 500 ‚Äì more items than necessary
250 1 x 250 1 x 500 ‚Äì more items than necessary
251 1 x 500 2 x 250 ‚Äì more packs than necessary
501 1 x 500
1 x 250

1 x 1000 ‚Äì more items than necessary
3 x 250 ‚Äì more packs than necessary

12001 2 x 5000
1 x 2000
1 x 250

3 x 5000 ‚Äì more items than necessary

Write an application that can calculate the number of packs we need to ship to the customer.
The API must be written in Golang & be usable by a HTTP API (by whichever method you
choose) and show any relevant unit tests.
Important:
- Keep your application flexible so that pack sizes can be changed and added and removed
without having to change the code.
- Create a UI to interact with your API
Please also send us your code via a publicly accessible git repository, GitHub or similar is
fine, and deploy your application to an online environment so that we can access it and test
your application out.
We look forward to receiving your application!

======================
REWRITTEN

üß† Software Engineering Challenge: Smart Pack Allocation API
üì¶ The Business Context
We offer products that ship exclusively in fixed pack sizes, such as:

250 items

500 items

1,000 items

2,000 items

5,000 items

Customers can place an order for any quantity, but we only fulfill using whole packs. Your task is to build a system that calculates the optimal pack distribution to fulfill a given order.

‚úÖ The Requirements
Whole Packs Only: You cannot break a pack ‚Äî partial packs are not allowed.

Minimize Total Items Sent: Fulfill the order using the least number of items possible without sending fewer than requested.

Minimize Number of Packs: If multiple combinations result in the same number of items, prefer the one using the fewest number of packs.

üîÅ Rule Priority: Rule #2 takes precedence over Rule #3.

üìä Examples
Items Ordered	Correct Pack Distribution	Incorrect Examples
1	1 √ó 250	1 √ó 500 (too many items)
250	1 √ó 250	1 √ó 500
251	1 √ó 500	2 √ó 250 (more packs)
501	1 √ó 500
1 √ó 250	1 √ó 1000 (too many items)
3 √ó 250 (more packs)
12,001	2 √ó 5000
1 √ó 2000
1 √ó 250	3 √ó 5000 (too many items)

üõ† Technical Requirements
Language: Golang

API: Expose functionality via a simple HTTP API (your design choice: REST, GraphQL, etc.)

Configuration:

Pack sizes must be configurable (e.g., via a config file or database)

No hardcoding of available pack sizes in logic

Testing: Include relevant unit tests

Frontend: Build a lightweight UI to interact with your API (any framework or plain HTML/JS)

Deployment:

Host the application on an accessible environment (e.g., Render, Railway, Fly.io, Vercel + backend)

Share the code via a public Git repository (e.g., GitHub)

üì¨ Submission
When ready, share:

The link to your hosted app

The GitHub repo URL

We‚Äôre excited to see your implementation!